// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/10/2023 20:33:51"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    combineASU
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module combineASU_vlg_sample_tst(
	Cin,
	X,
	Y,
	sampler_tx
);
input  Cin;
input [3:0] X;
input [3:0] Y;
output sampler_tx;

reg sample;
time current_time;
always @(Cin or X or Y)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module combineASU_vlg_check_tst (
	Cout,
	leds1,
	leds2,
	leds3,
	leds4,
	leds5,
	leds6,
	leds7,
	leds21,
	leds22,
	leds23,
	leds24,
	leds25,
	leds26,
	leds27,
	OF,
	sampler_rx
);
input  Cout;
input  leds1;
input  leds2;
input  leds3;
input  leds4;
input  leds5;
input  leds6;
input  leds7;
input  leds21;
input  leds22;
input  leds23;
input  leds24;
input  leds25;
input  leds26;
input  leds27;
input  OF;
input sampler_rx;

reg  Cout_expected;
reg  leds1_expected;
reg  leds2_expected;
reg  leds3_expected;
reg  leds4_expected;
reg  leds5_expected;
reg  leds6_expected;
reg  leds7_expected;
reg  leds21_expected;
reg  leds22_expected;
reg  leds23_expected;
reg  leds24_expected;
reg  leds25_expected;
reg  leds26_expected;
reg  leds27_expected;
reg  OF_expected;

reg  Cout_prev;
reg  leds1_prev;
reg  leds2_prev;
reg  leds3_prev;
reg  leds4_prev;
reg  leds5_prev;
reg  leds6_prev;
reg  leds7_prev;
reg  leds21_prev;
reg  leds22_prev;
reg  leds23_prev;
reg  leds24_prev;
reg  leds25_prev;
reg  leds26_prev;
reg  leds27_prev;
reg  OF_prev;

reg  Cout_expected_prev;
reg  leds1_expected_prev;
reg  leds2_expected_prev;
reg  leds3_expected_prev;
reg  leds4_expected_prev;
reg  leds5_expected_prev;
reg  leds6_expected_prev;
reg  leds7_expected_prev;
reg  leds21_expected_prev;
reg  leds22_expected_prev;
reg  leds23_expected_prev;
reg  leds24_expected_prev;
reg  leds25_expected_prev;
reg  leds26_expected_prev;
reg  leds27_expected_prev;
reg  OF_expected_prev;

reg  last_Cout_exp;
reg  last_leds1_exp;
reg  last_leds2_exp;
reg  last_leds3_exp;
reg  last_leds4_exp;
reg  last_leds5_exp;
reg  last_leds6_exp;
reg  last_leds7_exp;
reg  last_leds21_exp;
reg  last_leds22_exp;
reg  last_leds23_exp;
reg  last_leds24_exp;
reg  last_leds25_exp;
reg  last_leds26_exp;
reg  last_leds27_exp;
reg  last_OF_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:16] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 16'b1;
end

// update real /o prevs

always @(trigger)
begin
	Cout_prev = Cout;
	leds1_prev = leds1;
	leds2_prev = leds2;
	leds3_prev = leds3;
	leds4_prev = leds4;
	leds5_prev = leds5;
	leds6_prev = leds6;
	leds7_prev = leds7;
	leds21_prev = leds21;
	leds22_prev = leds22;
	leds23_prev = leds23;
	leds24_prev = leds24;
	leds25_prev = leds25;
	leds26_prev = leds26;
	leds27_prev = leds27;
	OF_prev = OF;
end

// update expected /o prevs

always @(trigger)
begin
	Cout_expected_prev = Cout_expected;
	leds1_expected_prev = leds1_expected;
	leds2_expected_prev = leds2_expected;
	leds3_expected_prev = leds3_expected;
	leds4_expected_prev = leds4_expected;
	leds5_expected_prev = leds5_expected;
	leds6_expected_prev = leds6_expected;
	leds7_expected_prev = leds7_expected;
	leds21_expected_prev = leds21_expected;
	leds22_expected_prev = leds22_expected;
	leds23_expected_prev = leds23_expected;
	leds24_expected_prev = leds24_expected;
	leds25_expected_prev = leds25_expected;
	leds26_expected_prev = leds26_expected;
	leds27_expected_prev = leds27_expected;
	OF_expected_prev = OF_expected;
end



// expected Cout
initial
begin
	Cout_expected = 1'bX;
end 

// expected leds1
initial
begin
	leds1_expected = 1'bX;
end 

// expected leds2
initial
begin
	leds2_expected = 1'bX;
end 

// expected leds3
initial
begin
	leds3_expected = 1'bX;
end 

// expected leds4
initial
begin
	leds4_expected = 1'bX;
end 

// expected leds5
initial
begin
	leds5_expected = 1'bX;
end 

// expected leds6
initial
begin
	leds6_expected = 1'bX;
end 

// expected leds7
initial
begin
	leds7_expected = 1'bX;
end 

// expected leds21
initial
begin
	leds21_expected = 1'bX;
end 

// expected leds22
initial
begin
	leds22_expected = 1'bX;
end 

// expected leds23
initial
begin
	leds23_expected = 1'bX;
end 

// expected leds24
initial
begin
	leds24_expected = 1'bX;
end 

// expected leds25
initial
begin
	leds25_expected = 1'bX;
end 

// expected leds26
initial
begin
	leds26_expected = 1'bX;
end 

// expected leds27
initial
begin
	leds27_expected = 1'bX;
end 

// expected OF
initial
begin
	OF_expected = 1'bX;
end 
// generate trigger
always @(Cout_expected or Cout or leds1_expected or leds1 or leds2_expected or leds2 or leds3_expected or leds3 or leds4_expected or leds4 or leds5_expected or leds5 or leds6_expected or leds6 or leds7_expected or leds7 or leds21_expected or leds21 or leds22_expected or leds22 or leds23_expected or leds23 or leds24_expected or leds24 or leds25_expected or leds25 or leds26_expected or leds26 or leds27_expected or leds27 or OF_expected or OF)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected Cout = %b | expected leds1 = %b | expected leds2 = %b | expected leds3 = %b | expected leds4 = %b | expected leds5 = %b | expected leds6 = %b | expected leds7 = %b | expected leds21 = %b | expected leds22 = %b | expected leds23 = %b | expected leds24 = %b | expected leds25 = %b | expected leds26 = %b | expected leds27 = %b | expected OF = %b | ",Cout_expected_prev,leds1_expected_prev,leds2_expected_prev,leds3_expected_prev,leds4_expected_prev,leds5_expected_prev,leds6_expected_prev,leds7_expected_prev,leds21_expected_prev,leds22_expected_prev,leds23_expected_prev,leds24_expected_prev,leds25_expected_prev,leds26_expected_prev,leds27_expected_prev,OF_expected_prev);
	$display("| real Cout = %b | real leds1 = %b | real leds2 = %b | real leds3 = %b | real leds4 = %b | real leds5 = %b | real leds6 = %b | real leds7 = %b | real leds21 = %b | real leds22 = %b | real leds23 = %b | real leds24 = %b | real leds25 = %b | real leds26 = %b | real leds27 = %b | real OF = %b | ",Cout_prev,leds1_prev,leds2_prev,leds3_prev,leds4_prev,leds5_prev,leds6_prev,leds7_prev,leds21_prev,leds22_prev,leds23_prev,leds24_prev,leds25_prev,leds26_prev,leds27_prev,OF_prev);
`endif
	if (
		( Cout_expected_prev !== 1'bx ) && ( Cout_prev !== Cout_expected_prev )
		&& ((Cout_expected_prev !== last_Cout_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Cout :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Cout_expected_prev);
		$display ("     Real value = %b", Cout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Cout_exp = Cout_expected_prev;
	end
	if (
		( leds1_expected_prev !== 1'bx ) && ( leds1_prev !== leds1_expected_prev )
		&& ((leds1_expected_prev !== last_leds1_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leds1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leds1_expected_prev);
		$display ("     Real value = %b", leds1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_leds1_exp = leds1_expected_prev;
	end
	if (
		( leds2_expected_prev !== 1'bx ) && ( leds2_prev !== leds2_expected_prev )
		&& ((leds2_expected_prev !== last_leds2_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leds2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leds2_expected_prev);
		$display ("     Real value = %b", leds2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_leds2_exp = leds2_expected_prev;
	end
	if (
		( leds3_expected_prev !== 1'bx ) && ( leds3_prev !== leds3_expected_prev )
		&& ((leds3_expected_prev !== last_leds3_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leds3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leds3_expected_prev);
		$display ("     Real value = %b", leds3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_leds3_exp = leds3_expected_prev;
	end
	if (
		( leds4_expected_prev !== 1'bx ) && ( leds4_prev !== leds4_expected_prev )
		&& ((leds4_expected_prev !== last_leds4_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leds4 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leds4_expected_prev);
		$display ("     Real value = %b", leds4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_leds4_exp = leds4_expected_prev;
	end
	if (
		( leds5_expected_prev !== 1'bx ) && ( leds5_prev !== leds5_expected_prev )
		&& ((leds5_expected_prev !== last_leds5_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leds5 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leds5_expected_prev);
		$display ("     Real value = %b", leds5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_leds5_exp = leds5_expected_prev;
	end
	if (
		( leds6_expected_prev !== 1'bx ) && ( leds6_prev !== leds6_expected_prev )
		&& ((leds6_expected_prev !== last_leds6_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leds6 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leds6_expected_prev);
		$display ("     Real value = %b", leds6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_leds6_exp = leds6_expected_prev;
	end
	if (
		( leds7_expected_prev !== 1'bx ) && ( leds7_prev !== leds7_expected_prev )
		&& ((leds7_expected_prev !== last_leds7_exp) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leds7 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leds7_expected_prev);
		$display ("     Real value = %b", leds7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_leds7_exp = leds7_expected_prev;
	end
	if (
		( leds21_expected_prev !== 1'bx ) && ( leds21_prev !== leds21_expected_prev )
		&& ((leds21_expected_prev !== last_leds21_exp) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leds21 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leds21_expected_prev);
		$display ("     Real value = %b", leds21_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_leds21_exp = leds21_expected_prev;
	end
	if (
		( leds22_expected_prev !== 1'bx ) && ( leds22_prev !== leds22_expected_prev )
		&& ((leds22_expected_prev !== last_leds22_exp) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leds22 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leds22_expected_prev);
		$display ("     Real value = %b", leds22_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_leds22_exp = leds22_expected_prev;
	end
	if (
		( leds23_expected_prev !== 1'bx ) && ( leds23_prev !== leds23_expected_prev )
		&& ((leds23_expected_prev !== last_leds23_exp) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leds23 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leds23_expected_prev);
		$display ("     Real value = %b", leds23_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_leds23_exp = leds23_expected_prev;
	end
	if (
		( leds24_expected_prev !== 1'bx ) && ( leds24_prev !== leds24_expected_prev )
		&& ((leds24_expected_prev !== last_leds24_exp) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leds24 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leds24_expected_prev);
		$display ("     Real value = %b", leds24_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_leds24_exp = leds24_expected_prev;
	end
	if (
		( leds25_expected_prev !== 1'bx ) && ( leds25_prev !== leds25_expected_prev )
		&& ((leds25_expected_prev !== last_leds25_exp) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leds25 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leds25_expected_prev);
		$display ("     Real value = %b", leds25_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_leds25_exp = leds25_expected_prev;
	end
	if (
		( leds26_expected_prev !== 1'bx ) && ( leds26_prev !== leds26_expected_prev )
		&& ((leds26_expected_prev !== last_leds26_exp) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leds26 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leds26_expected_prev);
		$display ("     Real value = %b", leds26_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_leds26_exp = leds26_expected_prev;
	end
	if (
		( leds27_expected_prev !== 1'bx ) && ( leds27_prev !== leds27_expected_prev )
		&& ((leds27_expected_prev !== last_leds27_exp) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leds27 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leds27_expected_prev);
		$display ("     Real value = %b", leds27_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_leds27_exp = leds27_expected_prev;
	end
	if (
		( OF_expected_prev !== 1'bx ) && ( OF_prev !== OF_expected_prev )
		&& ((OF_expected_prev !== last_OF_exp) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OF :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OF_expected_prev);
		$display ("     Real value = %b", OF_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_OF_exp = OF_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module combineASU_vlg_vec_tst();
// constants                                           
// general purpose registers
reg Cin;
reg [3:0] X;
reg [3:0] Y;
// wires                                               
wire Cout;
wire leds1;
wire leds2;
wire leds3;
wire leds4;
wire leds5;
wire leds6;
wire leds7;
wire leds21;
wire leds22;
wire leds23;
wire leds24;
wire leds25;
wire leds26;
wire leds27;
wire OF;

wire sampler;                             

// assign statements (if any)                          
combineASU i1 (
// port map - connection between master ports and signals/registers   
	.Cin(Cin),
	.Cout(Cout),
	.leds1(leds1),
	.leds2(leds2),
	.leds3(leds3),
	.leds4(leds4),
	.leds5(leds5),
	.leds6(leds6),
	.leds7(leds7),
	.leds21(leds21),
	.leds22(leds22),
	.leds23(leds23),
	.leds24(leds24),
	.leds25(leds25),
	.leds26(leds26),
	.leds27(leds27),
	.OF(OF),
	.X(X),
	.Y(Y)
);

// Cin
initial
begin
	Cin = 1'b0;
end 
// X[ 3 ]
initial
begin
	X[3] = 1'b0;
end 
// X[ 2 ]
initial
begin
	X[2] = 1'b0;
end 
// X[ 1 ]
initial
begin
	X[1] = 1'b1;
end 
// X[ 0 ]
initial
begin
	X[0] = 1'b0;
end 
// Y[ 3 ]
initial
begin
	Y[3] = 1'b0;
end 
// Y[ 2 ]
initial
begin
	Y[2] = 1'b1;
end 
// Y[ 1 ]
initial
begin
	Y[1] = 1'b0;
end 
// Y[ 0 ]
initial
begin
	Y[0] = 1'b1;
end 

combineASU_vlg_sample_tst tb_sample (
	.Cin(Cin),
	.X(X),
	.Y(Y),
	.sampler_tx(sampler)
);

combineASU_vlg_check_tst tb_out(
	.Cout(Cout),
	.leds1(leds1),
	.leds2(leds2),
	.leds3(leds3),
	.leds4(leds4),
	.leds5(leds5),
	.leds6(leds6),
	.leds7(leds7),
	.leds21(leds21),
	.leds22(leds22),
	.leds23(leds23),
	.leds24(leds24),
	.leds25(leds25),
	.leds26(leds26),
	.leds27(leds27),
	.OF(OF),
	.sampler_rx(sampler)
);
endmodule

